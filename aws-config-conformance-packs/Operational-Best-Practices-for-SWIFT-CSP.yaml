##################################################################################
#
#   Conformance Pack:
#     Operational Best Practices for SWIFT CSP
#
#   This conformance pack helps verify compliance with SWIFT CSP requirements.
#
#   See Parameters section for names and descriptions of required parameters.
#
##################################################################################

Parameters:
  AccessKeysRotatedParamMaxAccessKeyAge:
    Default: '90'
    Description: Maximum number of days without rotation. Default 90.
    Type: String
  IamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns:
    Default: kms:*, kms:Decrypt, kms:ReEncrypt*
    Description: Comma-separated list of blocked KMS action patterns, for example,
      kms:*, kms:Decrypt, kms:ReEncrypt*.
    Type: String
  IamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns:
    Default: kms:*, kms:Decrypt, kms:ReEncrypt*
    Description: Comma-separated list of blocked KMS action patterns, for example,
      kms:*, kms:Decrypt, kms:ReEncrypt*.
    Type: String
  IamPasswordPolicyParamMaxPasswordAge:
    Default: '90'
    Description: Number of days before password expiration.
    Type: String
  IamPasswordPolicyParamMinimumPasswordLength:
    Default: '14'
    Description: Password minimum length.
    Type: String
  IamPasswordPolicyParamPasswordReusePrevention:
    Default: '24'
    Description: Number of passwords before allowing reuse.
    Type: String
  IamPasswordPolicyParamRequireLowercaseCharacters:
    Default: 'true'
    Description: Require at least one lowercase character in password.
    Type: String
  IamPasswordPolicyParamRequireNumbers:
    Default: 'true'
    Description: Require at least one number in password.
    Type: String
  IamPasswordPolicyParamRequireSymbols:
    Default: 'true'
    Description: Require at least one symbol in password.
    Type: String
  IamPasswordPolicyParamRequireUppercaseCharacters:
    Default: 'true'
    Description: Require at least one uppercase character in password.
    Type: String
  IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge:
    Default: '90'
    Description: Maximum number of days a credential cannot be used. The default value
      is 90 days.
    Type: String
  RestrictedIncomingTrafficParamBlockedPort1:
    Default: '20'
    Description: Blocked TCP port number.
    Type: String
  RestrictedIncomingTrafficParamBlockedPort2:
    Default: '21'
    Description: Blocked TCP port number.
    Type: String
  RestrictedIncomingTrafficParamBlockedPort3:
    Default: '3389'
    Description: Blocked TCP port number.
    Type: String
  RestrictedIncomingTrafficParamBlockedPort4:
    Default: '3306'
    Description: Blocked TCP port number.
    Type: String
  RestrictedIncomingTrafficParamBlockedPort5:
    Default: '4333'
    Description: Blocked TCP port number.
    Type: String
  VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts:
    Default: '443'
    Description: ' Comma-separated list of TCP ports authorized to be open to 0.0.0.0/0.
      Ranges are defined by dash, for example, "443,1020-1025".'
    Type: String
Resources:
  AccessKeysRotated:
    Controls:
    - '4.1'
    Properties:
      ConfigRuleName: access-keys-rotated
      Description: Checks whether the active access keys are rotated within the number
        of days specified in maxAccessKeyAge. The rule is non-compliant if the access
        keys have not been rotated for more than maxAccessKeyAge number of days.
      InputParameters:
        maxAccessKeyAge:
          Fn::If:
          - accessKeysRotatedParamMaxAccessKeyAge
          - Ref: AccessKeysRotatedParamMaxAccessKeyAge
          - Ref: AWS::NoValue
      Source:
        Owner: AWS
        SourceIdentifier: ACCESS_KEYS_ROTATED
    Type: AWS::Config::ConfigRule
  AccountPartOfOrganizations:
    Controls:
    - '2.3'
    Properties:
      ConfigRuleName: account-part-of-organizations
      Description: Rule checks whether AWS account is part of AWS Organizations. The
        rule is NON_COMPLIANT if the AWS account is not part of AWS Organizations
        or AWS Organizations master account ID does not match rule parameter MasterAccountId.
      Source:
        Owner: AWS
        SourceIdentifier: ACCOUNT_PART_OF_ORGANIZATIONS
    Type: AWS::Config::ConfigRule
  ApiGwSslEnabled:
    Controls:
    - '2.4A'
    Properties:
      ConfigRuleName: api-gw-ssl-enabled
      Description: Checks if a REST API stage uses an Secure Sockets Layer (SSL) certificate.
        This rule is NON_COMPLIANT if the REST API stage does not have an associated
        SSL certificate.
      Scope:
        ComplianceResourceTypes:
        - AWS::ApiGateway::Stage
      Source:
        Owner: AWS
        SourceIdentifier: API_GW_SSL_ENABLED
    Type: AWS::Config::ConfigRule
  AutoscalingLaunchConfigPublicIpDisabled:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: autoscaling-launch-config-public-ip-disabled
      Description: Checks if Amazon EC2 Auto Scaling groups have public IP addresses
        enabled through Launch Configurations. This rule is NON_COMPLIANT if the Launch
        Configuration for an Auto Scaling group has AssociatePublicIpAddress set to
        'true'.
      Scope:
        ComplianceResourceTypes:
        - AWS::AutoScaling::LaunchConfiguration
      Source:
        Owner: AWS
        SourceIdentifier: AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED
    Type: AWS::Config::ConfigRule
  CloudTrailCloudWatchLogsEnabled:
    Controls:
    - '6.4'
    Properties:
      ConfigRuleName: cloud-trail-cloud-watch-logs-enabled
      Description: Checks whether AWS CloudTrail trails are configured to send logs
        to Amazon CloudWatch logs. The trail is non-compliant if the CloudWatchLogsLogGroupArn
        property of the trail is empty.
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED
    Type: AWS::Config::ConfigRule
  CloudTrailEnabled:
    Controls:
    - '6.4'
    Properties:
      ConfigRuleName: cloud-trail-enabled
      Description: Checks whether AWS CloudTrail is enabled in your AWS account.
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED
    Type: AWS::Config::ConfigRule
  CloudTrailEncryptionEnabled:
    Controls:
    - '6.4'
    Properties:
      ConfigRuleName: cloud-trail-encryption-enabled
      Description: Checks whether AWS CloudTrail is configured to use the server side
        encryption (SSE) AWS Key Management Service (AWS KMS) customer master key
        (CMK) encryption. The rule is compliant if the KmsKeyId is defined.
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENCRYPTION_ENABLED
    Type: AWS::Config::ConfigRule
  CloudTrailLogFileValidationEnabled:
    Controls:
    - '6.4'
    Properties:
      ConfigRuleName: cloud-trail-log-file-validation-enabled
      Description: Checks whether AWS CloudTrail creates a signed digest file with
        logs. AWS recommends that the file validation must be enabled on all trails.
        The rule is noncompliant if the validation is not enabled.
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED
    Type: AWS::Config::ConfigRule
  CloudwatchLogGroupEncrypted:
    Controls:
    - '6.4'
    Properties:
      ConfigRuleName: cloudwatch-log-group-encrypted
      Description: Checks whether a log group in Amazon CloudWatch Logs is encrypted.
        The rule is NON_COMPLIANT if CloudWatch Logs has log group without encryption
        enabled.
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDWATCH_LOG_GROUP_ENCRYPTED
    Type: AWS::Config::ConfigRule
  DynamodbTableEncryptedKms:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: dynamodb-table-encrypted-kms
      Description: Checks whether Amazon DynamoDB table is encrypted with AWS Key
        Management Service (KMS). The rule is NON_COMPLIANT if Amazon DynamoDB table
        is not encrypted with AWS KMS.
      Scope:
        ComplianceResourceTypes:
        - AWS::DynamoDB::Table
      Source:
        Owner: AWS
        SourceIdentifier: DYNAMODB_TABLE_ENCRYPTED_KMS
    Type: AWS::Config::ConfigRule
  EbsInBackupPlan:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: ebs-in-backup-plan
      Description: Check if Amazon Elastic Block Store (Amazon EBS) volumes are added
        in backup plans of AWS Backup. The rule is NON_COMPLIANT if Amazon EBS volumes
        are not included in backup plans.
      Source:
        Owner: AWS
        SourceIdentifier: EBS_IN_BACKUP_PLAN
    Type: AWS::Config::ConfigRule
  Ec2EbsEncryptionByDefault:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: ec2-ebs-encryption-by-default
      Description: Check that Amazon Elastic Block Store (EBS) encryption is enabled
        by default. The rule is NON_COMPLIANT if the encryption is not enabled.
      Source:
        Owner: AWS
        SourceIdentifier: EC2_EBS_ENCRYPTION_BY_DEFAULT
    Type: AWS::Config::ConfigRule
  Ec2Imdsv2Check:
    Controls:
    - '2.3'
    Properties:
      ConfigRuleName: ec2-imdsv2-check
      Description: Checks whether your Amazon Elastic Compute Cloud (Amazon EC2) instance
        metadata version is configured with Instance Metadata Service Version 2 (IMDSv2).
        The rule is NON_COMPLIANT if the HttpTokens is set to optional.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_IMDSV2_CHECK
    Type: AWS::Config::ConfigRule
  Ec2InstanceDetailedMonitoringEnabled:
    Controls:
    - '6.4'
    - '6.4'
    Properties:
      ConfigRuleName: ec2-instance-detailed-monitoring-enabled
      Description: Checks whether detailed monitoring is enabled for EC2 instances.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_DETAILED_MONITORING_ENABLED
    Type: AWS::Config::ConfigRule
  Ec2InstanceManagedBySsm:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: ec2-instance-managed-by-systems-manager
      Description: Checks whether the Amazon EC2 instances in your account are managed
        by AWS Systems Manager.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
        - AWS::SSM::ManagedInstanceInventory
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_MANAGED_BY_SSM
    Type: AWS::Config::ConfigRule
  Ec2InstanceMultipleEniCheck:
    Controls:
    - '2.3'
    Properties:
      ConfigRuleName: ec2-instance-multiple-eni-check
      Description: Checks if Amazon Elastic Compute Cloud (Amazon EC2) uses multiple
        ENIs (Elastic Network Interfaces) or Elastic Fabric Adapters (EFAs). This
        rule is NON_COMPLIANT an Amazon EC2 instance use multiple network interfaces.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_MULTIPLE_ENI_CHECK
    Type: AWS::Config::ConfigRule
  Ec2InstanceNoPublicIp:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: ec2-instance-no-public-ip
      Description: Checks whether Amazon Elastic Compute Cloud (Amazon EC2) instances
        have a public IP association. The rule is NON_COMPLIANT if the publicIp field
        is present in the Amazon EC2 instance configuration item. This rule applies
        only to IPv4.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP
    Type: AWS::Config::ConfigRule
  Ec2InstanceProfileAttached:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    - '5.1'
    Properties:
      ConfigRuleName: ec2-instance-profile-attached
      Description: Checks if an Amazon Elastic Compute Cloud (Amazon EC2) instance
        has an Identity and Access Management (IAM) profile attached to it. This rule
        is NON_COMPLIANT if no IAM profile is attached to the Amazon EC2 instance.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_PROFILE_ATTACHED
    Type: AWS::Config::ConfigRule
  Ec2ManagedinstancePatchComplianceStatusCheck:
    Controls:
    - '2.7'
    Properties:
      ConfigRuleName: ec2-managedinstance-patch-compliance-status-check
      Description: Checks whether the compliance status of the AWS Systems Manager
        patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation
        on the instance. The rule is compliant if the field status is COMPLIANT.
      Scope:
        ComplianceResourceTypes:
        - AWS::SSM::PatchCompliance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK
    Type: AWS::Config::ConfigRule
  Ec2NoAmazonKeyPair:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: ec2-no-amazon-key-pair
      Description: Checks if running Amazon Elastic Compute Cloud (EC2) instances
        are launched using amazon key pairs. The rule is NON_COMPLIANT if a running
        EC2 instance is launched with a key pair.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_NO_AMAZON_KEY_PAIR
    Type: AWS::Config::ConfigRule
  Ec2StoppedInstance:
    Controls:
    - '6.4'
    Properties:
      ConfigRuleName: ec2-stopped-instance
      Description: Checks whether there are instances stopped for more than the allowed
        number of days.
      Source:
        Owner: AWS
        SourceIdentifier: EC2_STOPPED_INSTANCE
    Type: AWS::Config::ConfigRule
  Ec2TokenHopLimitCheck:
    Controls:
    - '2.3'
    Properties:
      ConfigRuleName: ec2-token-hop-limit-check
      Description: Checks if an Amazon Elastic Compute Cloud (EC2) instance metadata
        has a specified token hop limit that is below the desired limit. The rule
        is NON_COMPLIANT for an instance if it has a hop limit value above the intended
        limit.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_TOKEN_HOP_LIMIT_CHECK
    Type: AWS::Config::ConfigRule
  Ec2VolumeInuseCheck:
    Controls:
    - '2.3'
    Properties:
      ConfigRuleName: ec2-volume-inuse-check
      Description: Checks whether EBS volumes are attached to EC2 instances.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: EC2_VOLUME_INUSE_CHECK
    Type: AWS::Config::ConfigRule
  EfsEncryptedCheck:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: efs-encrypted-check
      Description: Checks whether Amazon EFS are configured to encrypt file data using
        AWS KMS. The rule is NON_COMPLIANT if the Encrypted key is set to False on
        DescribeFileSystems or, if specified, KmsKeyId key on DescribeFileSystems
        is not matching KmsKeyId parameter.
      Source:
        Owner: AWS
        SourceIdentifier: EFS_ENCRYPTED_CHECK
    Type: AWS::Config::ConfigRule
  EfsInBackupPlan:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: efs-in-backup-plan
      Description: Checks whether Amazon Elastic File System (Amazon EFS) file systems
        are added in the backup plans of AWS Backup. The rule is NON_COMPLIANT if
        EFS file systems are not included in the backup plans.
      Source:
        Owner: AWS
        SourceIdentifier: EFS_IN_BACKUP_PLAN
    Type: AWS::Config::ConfigRule
  ElasticsearchNodeToNodeEncryptionCheck:
    Controls:
    - '2.4A'
    Properties:
      ConfigRuleName: elasticsearch-node-to-node-encryption-check
      Description: Check that Amazon ElasticSearch Service nodes are encrypted end
        to end. The rule is NON_COMPLIANT if the node-to-node encryption is disabled
        on the domain.
      Scope:
        ComplianceResourceTypes:
        - AWS::Elasticsearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK
    Type: AWS::Config::ConfigRule
  EncryptedVolumes:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: encrypted-volumes
      Description: Checks whether EBS volumes that are in an attached state are encrypted.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES
    Type: AWS::Config::ConfigRule
  GuarddutyEnabledCentralized:
    Controls:
    - '6.1'
    - '6.5A'
    Properties:
      ConfigRuleName: guardduty-enabled-centralized
      Description: Checks whether GuardDuty is enabled. You can optionally verify
        that the results are centralized in a specific AWS Account.
      Source:
        Owner: AWS
        SourceIdentifier: GUARDDUTY_ENABLED_CENTRALIZED
    Type: AWS::Config::ConfigRule
  GuarddutyNonArchivedFindings:
    Controls:
    - '6.1'
    Properties:
      ConfigRuleName: guardduty-non-archived-findings
      Description: Checks whether Amazon GuardDuty has findings that are non archived.
        The rule is NON_COMPLIANT if Amazon GuardDuty has non archived low/medium/high
        severity findings older than the specified number in the daysLowSev/daysMediumSev/daysHighSev
        parameter.
      Source:
        Owner: AWS
        SourceIdentifier: GUARDDUTY_NON_ARCHIVED_FINDINGS
    Type: AWS::Config::ConfigRule
  IamCustomerPolicyBlockedKmsActions:
    Controls:
    - '1.2'
    Properties:
      ConfigRuleName: iam-customer-policy-blocked-kms-actions
      Description: Checks that the managed AWS Identity and Access Management (IAM)
        policies that you create do not allow blocked actions on all AWS KMS keys.
        The rule is NON_COMPLIANT if any blocked action is allowed on all AWS KMS
        keys by the managed IAM policy.
      InputParameters:
        blockedActionsPatterns:
          Fn::If:
          - iamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns
          - Ref: IamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns
          - Ref: AWS::NoValue
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::Policy
      Source:
        Owner: AWS
        SourceIdentifier: IAM_CUSTOMER_POLICY_BLOCKED_KMS_ACTIONS
    Type: AWS::Config::ConfigRule
  IamGroupHasUsersCheck:
    Controls:
    - '1.2'
    Properties:
      ConfigRuleName: iam-group-has-users-check
      Description: Checks whether IAM groups have at least one IAM user.
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::Group
      Source:
        Owner: AWS
        SourceIdentifier: IAM_GROUP_HAS_USERS_CHECK
    Type: AWS::Config::ConfigRule
  IamInlinePolicyBlockedKmsActions:
    Controls:
    - '1.2'
    Properties:
      ConfigRuleName: iam-inline-policy-blocked-kms-actions
      Description: Checks that the inline policies attached to your IAM users, roles,
        and groups do not allow blocked actions on all AWS Key Management Service
        (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on
        all KMS keys in an inline policy.
      InputParameters:
        blockedActionsPatterns:
          Fn::If:
          - iamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns
          - Ref: IamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns
          - Ref: AWS::NoValue
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::Group
        - AWS::IAM::Role
        - AWS::IAM::User
      Source:
        Owner: AWS
        SourceIdentifier: IAM_INLINE_POLICY_BLOCKED_KMS_ACTIONS
    Type: AWS::Config::ConfigRule
  IamNoInlinePolicyCheck:
    Controls:
    - '1.2'
    Properties:
      ConfigRuleName: iam-no-inline-policy-check
      Description: Checks that inline policy feature is not in use. The rule is NON_COMPLIANT
        if an AWS Identity and Access Management (IAM) user, IAM role or IAM group
        has any inline policy.
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
        - AWS::IAM::Role
        - AWS::IAM::Group
      Source:
        Owner: AWS
        SourceIdentifier: IAM_NO_INLINE_POLICY_CHECK
    Type: AWS::Config::ConfigRule
  IamPasswordPolicy:
    Controls:
    - '4.1'
    Properties:
      ConfigRuleName: iam-password-policy
      Description: Checks whether the account password policy for IAM users meets
        the specified requirements.
      InputParameters:
        MaxPasswordAge:
          Fn::If:
          - iamPasswordPolicyParamMaxPasswordAge
          - Ref: IamPasswordPolicyParamMaxPasswordAge
          - Ref: AWS::NoValue
        MinimumPasswordLength:
          Fn::If:
          - iamPasswordPolicyParamMinimumPasswordLength
          - Ref: IamPasswordPolicyParamMinimumPasswordLength
          - Ref: AWS::NoValue
        PasswordReusePrevention:
          Fn::If:
          - iamPasswordPolicyParamPasswordReusePrevention
          - Ref: IamPasswordPolicyParamPasswordReusePrevention
          - Ref: AWS::NoValue
        RequireLowercaseCharacters:
          Fn::If:
          - iamPasswordPolicyParamRequireLowercaseCharacters
          - Ref: IamPasswordPolicyParamRequireLowercaseCharacters
          - Ref: AWS::NoValue
        RequireNumbers:
          Fn::If:
          - iamPasswordPolicyParamRequireNumbers
          - Ref: IamPasswordPolicyParamRequireNumbers
          - Ref: AWS::NoValue
        RequireSymbols:
          Fn::If:
          - iamPasswordPolicyParamRequireSymbols
          - Ref: IamPasswordPolicyParamRequireSymbols
          - Ref: AWS::NoValue
        RequireUppercaseCharacters:
          Fn::If:
          - iamPasswordPolicyParamRequireUppercaseCharacters
          - Ref: IamPasswordPolicyParamRequireUppercaseCharacters
          - Ref: AWS::NoValue
      Source:
        Owner: AWS
        SourceIdentifier: IAM_PASSWORD_POLICY
    Type: AWS::Config::ConfigRule
  IamPolicyNoStatementsWithFullAccess:
    Controls:
    - '5.1'
    Properties:
      ConfigRuleName: iam-policy-no-statements-with-full-access
      Description: Checks if AWS Identity and Access Management (IAM) policies grant
        permissions to all actions on individual AWS resources. The rule is NON_COMPLIANT
        if the managed IAM policy allows full access to at least 1 AWS service.
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::Policy
      Source:
        Owner: AWS
        SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS
    Type: AWS::Config::ConfigRule
  IamRootAccessKeyCheck:
    Controls:
    - '5.1'
    Properties:
      ConfigRuleName: iam-root-access-key-check
      Description: Checks whether the root user access key is available. The rule
        is compliant if the user access key does not exist.
      Source:
        Owner: AWS
        SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK
    Type: AWS::Config::ConfigRule
  IamUserGroupMembershipCheck:
    Controls:
    - '5.1'
    Properties:
      ConfigRuleName: iam-user-group-membership-check
      Description: Checks whether IAM users are members of at least one IAM group.
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_GROUP_MEMBERSHIP_CHECK
    Type: AWS::Config::ConfigRule
  IamUserMfaEnabled:
    Controls:
    - '4.2'
    Properties:
      ConfigRuleName: iam-user-mfa-enabled
      Description: Checks whether the AWS Identity and Access Management users have
        multi-factor authentication (MFA) enabled.
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_MFA_ENABLED
    Type: AWS::Config::ConfigRule
  IamUserNoPoliciesCheck:
    Controls:
    - '1.2'
    Properties:
      ConfigRuleName: iam-user-no-policies-check
      Description: Checks that none of your IAM users have policies attached. IAM
        users must inherit permissions from IAM groups or roles.
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_NO_POLICIES_CHECK
    Type: AWS::Config::ConfigRule
  IamUserUnusedCredentialsCheck:
    Controls:
    - '5.1'
    Properties:
      ConfigRuleName: iam-user-unused-credentials-check
      Description: Checks whether your AWS Identity and Access Management (IAM) users
        have passwords or active access keys that have not been used within the specified
        number of days you provided.
      InputParameters:
        maxCredentialUsageAge:
          Fn::If:
          - iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge
          - Ref: IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge
          - Ref: AWS::NoValue
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_UNUSED_CREDENTIALS_CHECK
    Type: AWS::Config::ConfigRule
  IncomingSshDisabled:
    Controls:
    - '1.2'
    - '2.6'
    Properties:
      ConfigRuleName: restricted-ssh
      Description: Checks whether security groups that are in use disallow unrestricted
        incoming SSH traffic.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: INCOMING_SSH_DISABLED
    Type: AWS::Config::ConfigRule
  InstancesInVpc:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: ec2-instances-in-vpc
      Description: Checks whether your EC2 instances belong to a virtual private cloud
        (VPC).
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: INSTANCES_IN_VPC
    Type: AWS::Config::ConfigRule
  InternetGatewayAuthorizedVpcOnly:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: internet-gateway-authorized-vpc-only
      Description: Checks that Internet gateways (IGWs) are only attached to an authorized
        Amazon Virtual Private Cloud (VPCs). The rule is NON_COMPLIANT if IGWs are
        not attached to an authorized VPC.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::InternetGateway
      Source:
        Owner: AWS
        SourceIdentifier: INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY
    Type: AWS::Config::ConfigRule
  KinesisStreamEncrypted:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: kinesis-stream-encrypted
      Description: Checks if Amazon Kinesis streams are encrypted at rest with server-side
        encryption. The rule is NON_COMPLIANT for a Kinesis stream if 'StreamEncryption'
        is not present.
      Scope:
        ComplianceResourceTypes:
        - AWS::Kinesis::Stream
      Source:
        Owner: AWS
        SourceIdentifier: KINESIS_STREAM_ENCRYPTED
    Type: AWS::Config::ConfigRule
  KmsCmkNotScheduledForDeletion:
    Controls:
    - '2.3'
    Properties:
      ConfigRuleName: kms-cmk-not-scheduled-for-deletion
      Description: Checks whether customer master keys (CMKs) are not scheduled for
        deletion in AWS Key Management Service (KMS). The rule is NON_COMPLAINT if
        CMKs are scheduled for deletion.
      Scope:
        ComplianceResourceTypes:
        - AWS::KMS::Key
      Source:
        Owner: AWS
        SourceIdentifier: KMS_CMK_NOT_SCHEDULED_FOR_DELETION
    Type: AWS::Config::ConfigRule
  LambdaFunctionPublicAccessProhibited:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: lambda-function-public-access-prohibited
      Description: Checks whether the Lambda function policy prohibits public access.
      Scope:
        ComplianceResourceTypes:
        - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED
    Type: AWS::Config::ConfigRule
  LambdaInsideVpc:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    - '2.3'
    Properties:
      ConfigRuleName: lambda-inside-vpc
      Description: Checks whether an AWS Lambda function is in an Amazon Virtual Private
        Cloud. The rule is NON_COMPLIANT if the Lambda function is not in a VPC.
      Scope:
        ComplianceResourceTypes:
        - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_INSIDE_VPC
    Type: AWS::Config::ConfigRule
  MfaEnabledForIamConsoleAccess:
    Controls:
    - '4.2'
    Properties:
      ConfigRuleName: mfa-enabled-for-iam-console-access
      Description: Checks whether AWS Multi-Factor Authentication (MFA) is enabled
        for all AWS Identity and Access Management (IAM) users that use a console
        password. The rule is compliant if MFA is enabled.
      Source:
        Owner: AWS
        SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS
    Type: AWS::Config::ConfigRule
  NaclNoUnrestrictedSshRdp:
    Controls:
    - '1.2'
    - '2.6'
    Properties:
      ConfigRuleName: nacl-no-unrestricted-ssh-rdp
      Description: Checks if default ports for SSH/RDP ingress traffic for network
        access control lists (NACLs) is unrestricted. The rule is NON_COMPLIANT if
        a NACL inbound entry allows a source CIDR block of '0.0.0.0/0' or '::/0' for
        ports 22 or 3389.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::NetworkAcl
      Source:
        Owner: AWS
        SourceIdentifier: NACL_NO_UNRESTRICTED_SSH_RDP
    Type: AWS::Config::ConfigRule
  NetfwPolicyRuleGroupAssociated:
    Controls:
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: netfw-policy-rule-group-associated
      Description: Check AWS Network Firewall policy is associated with stateful OR
        stateless rule groups. This rule is NON_COMPLIANT if no stateful or stateless
        rule groups are associated with the Network Firewall policy else COMPLIANT
        if any one of the rule group exists.
      Scope:
        ComplianceResourceTypes:
        - AWS::NetworkFirewall::FirewallPolicy
      Source:
        Owner: AWS
        SourceIdentifier: NETFW_POLICY_RULE_GROUP_ASSOCIATED
    Type: AWS::Config::ConfigRule
  NoUnrestrictedRouteToIgw:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: no-unrestricted-route-to-igw
      Description: Checks if there are public routes in the route table to an Internet
        Gateway (IGW). The rule is NON_COMPLIANT if a route to an IGW has a destination
        CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not
        match the rule parameter.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::RouteTable
      Source:
        Owner: AWS
        SourceIdentifier: NO_UNRESTRICTED_ROUTE_TO_IGW
    Type: AWS::Config::ConfigRule
  OpensearchNodeToNodeEncryptionCheck:
    Controls:
    - '2.4A'
    Properties:
      ConfigRuleName: opensearch-node-to-node-encryption-check
      Description: Check that Amazon OpenSearch Service nodes are encrypted end to
        end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled
        on the domain
      Scope:
        ComplianceResourceTypes:
        - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK
    Type: AWS::Config::ConfigRule
  RestrictedIncomingTraffic:
    Controls:
    - '1.1'
    - '1.3'
    - '1.4'
    - '1.5A'
    Properties:
      ConfigRuleName: restricted-common-ports
      Description: Checks whether security groups that are in use disallow unrestricted
        incoming TCP traffic to the specified ports.
      InputParameters:
        blockedPort1:
          Fn::If:
          - restrictedIncomingTrafficParamBlockedPort1
          - Ref: RestrictedIncomingTrafficParamBlockedPort1
          - Ref: AWS::NoValue
        blockedPort2:
          Fn::If:
          - restrictedIncomingTrafficParamBlockedPort2
          - Ref: RestrictedIncomingTrafficParamBlockedPort2
          - Ref: AWS::NoValue
        blockedPort3:
          Fn::If:
          - restrictedIncomingTrafficParamBlockedPort3
          - Ref: RestrictedIncomingTrafficParamBlockedPort3
          - Ref: AWS::NoValue
        blockedPort4:
          Fn::If:
          - restrictedIncomingTrafficParamBlockedPort4
          - Ref: RestrictedIncomingTrafficParamBlockedPort4
          - Ref: AWS::NoValue
        blockedPort5:
          Fn::If:
          - restrictedIncomingTrafficParamBlockedPort5
          - Ref: RestrictedIncomingTrafficParamBlockedPort5
          - Ref: AWS::NoValue
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC
    Type: AWS::Config::ConfigRule
  RootAccountHardwareMfaEnabled:
    Controls:
    - '4.2'
    Properties:
      ConfigRuleName: root-account-hardware-mfa-enabled
      Description: Checks whether your AWS account is enabled to use multi-factor
        authentication (MFA) hardware device to sign in with root credentials.
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED
    Type: AWS::Config::ConfigRule
  RootAccountMfaEnabled:
    Controls:
    - '4.2'
    Properties:
      ConfigRuleName: root-account-mfa-enabled
      Description: Checks whether the root user of your AWS account requires multi-factor
        authentication for console sign-in.
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED
    Type: AWS::Config::ConfigRule
  S3AccountLevelPublicAccessBlocksPeriodic:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: s3-account-level-public-access-blocks-periodic
      Description: Checks if the required public access block settings are configured
        from account level.
      Source:
        Owner: AWS
        SourceIdentifier: S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC
    Type: AWS::Config::ConfigRule
  S3BucketAclProhibited:
    Controls:
    - '1.2'
    Properties:
      ConfigRuleName: s3-bucket-acl-prohibited
      Description: Checks if Amazon Simple Storage Service (Amazon S3) Buckets allow
        user permissions through access control lists (ACLs). The rule is NON_COMPLIANT
        if ACLs are configured for user access in Amazon S3 Buckets.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_ACL_PROHIBITED
    Type: AWS::Config::ConfigRule
  S3BucketLevelPublicAccessProhibited:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: s3-bucket-level-public-access-prohibited
      Description: Checks if Amazon Simple Storage Service (Amazon S3) buckets are
        publicly accessible. This rule is NON_COMPLIANT if an Amazon S3 bucket is
        not listed in the excludedPublicBuckets parameter and bucket level settings
        are public.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_LEVEL_PUBLIC_ACCESS_PROHIBITED
    Type: AWS::Config::ConfigRule
  S3BucketLoggingEnabled:
    Controls:
    - '6.4'
    Properties:
      ConfigRuleName: s3-bucket-logging-enabled
      Description: Checks whether logging is enabled for your S3 buckets.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_LOGGING_ENABLED
    Type: AWS::Config::ConfigRule
  S3BucketPolicyGranteeCheck:
    Controls:
    - '1.1'
    - '1.2'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: s3-bucket-policy-grantee-check
      Description: Checks that the access granted by the Amazon S3 bucket is restricted
        to any of the AWS principals, federated users, service principals, IP addresses,
        or VPCs that you provide. The rule is COMPLIANT if a bucket policy is not
        present.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_POLICY_GRANTEE_CHECK
    Type: AWS::Config::ConfigRule
  S3BucketPublicReadProhibited:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: s3-bucket-public-read-prohibited
      Description: Checks that your Amazon S3 buckets do not allow public read access.
        The rule checks the Block Public Access settings, the bucket policy, and the
        bucket access control list (ACL).
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED
    Type: AWS::Config::ConfigRule
  S3BucketPublicWriteProhibited:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: s3-bucket-public-write-prohibited
      Description: Checks that your Amazon S3 buckets do not allow public write access.
        The rule checks the Block Public Access settings, the bucket policy, and the
        bucket access control list (ACL).
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED
    Type: AWS::Config::ConfigRule
  S3BucketServerSideEncryptionEnabled:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: s3-bucket-server-side-encryption-enabled
      Description: Checks that your Amazon S3 bucket either has S3 default encryption
        enabled or that the S3 bucket policy explicitly denies put-object requests
        without server side encryption.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED
    Type: AWS::Config::ConfigRule
  S3BucketVersioningEnabled:
    Controls:
    - '2.3'
    Properties:
      ConfigRuleName: s3-bucket-versioning-enabled
      Description: Checks whether versioning is enabled for your S3 buckets.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_VERSIONING_ENABLED
    Type: AWS::Config::ConfigRule
  S3DefaultEncryptionKms:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: s3-default-encryption-kms
      Description: Checks whether the Amazon S3 buckets are encrypted with AWS Key
        Management Service(AWS KMS). The rule is NON_COMPLIANT if the Amazon S3 bucket
        is not encrypted with AWS KMS key.
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_DEFAULT_ENCRYPTION_KMS
    Type: AWS::Config::ConfigRule
  SecretsmanagerRotationEnabledCheck:
    Controls:
    - '5.4'
    Properties:
      ConfigRuleName: secretsmanager-rotation-enabled-check
      Description: Checks whether AWS Secret Manager secret has rotation enabled.
        If the maximumAllowedRotationFrequency parameter is specified, the rotation
        frequency of the secret is compared with the maximum allowed frequency.
      Scope:
        ComplianceResourceTypes:
        - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_ROTATION_ENABLED_CHECK
    Type: AWS::Config::ConfigRule
  SecretsmanagerScheduledRotationSuccessCheck:
    Controls:
    - '5.4'
    Properties:
      ConfigRuleName: secretsmanager-scheduled-rotation-success-check
      Description: Checks and verifies whether AWS Secret Manager secret rotation
        has rotated successfully as per the rotation schedule.
      Scope:
        ComplianceResourceTypes:
        - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK
    Type: AWS::Config::ConfigRule
  SecretsmanagerSecretPeriodicRotation:
    Controls:
    - '5.4'
    Properties:
      ConfigRuleName: secretsmanager-secret-periodic-rotation
      Description: Checks if AWS Secrets Manager secrets have been rotated in the
        past 90 days by examining 'LastRotatedDate' value of the secret.  If 'LastRotatedDate'
        doesn't exist then this rule will check for the creation date of the secret.
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_SECRET_PERIODIC_ROTATION
    Type: AWS::Config::ConfigRule
  SecretsmanagerSecretUnused:
    Controls:
    - '2.3'
    Properties:
      ConfigRuleName: secretsmanager-secret-unused
      Description: Checks if AWS Secrets Manager secrets have been accessed in the
        past 90 days. This rule is NON_COMPLIANT if a secret has not been accessed
        in 90 days.
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_SECRET_UNUSED
    Type: AWS::Config::ConfigRule
  SecretsmanagerUsingCmk:
    Controls:
    - '5.4'
    Properties:
      ConfigRuleName: secretsmanager-using-cmk
      Description: Checks if all secrets in AWS Secrets Manager are encrypted using
        an AWS Key Management Service (AWS KMS) customer master key (CMK). This rule
        is NON_COMPLIANT if a secret is encrypted using the default AWS KMS key
      Scope:
        ComplianceResourceTypes:
        - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_USING_CMK
    Type: AWS::Config::ConfigRule
  SecurityhubEnabled:
    Controls:
    - '6.5A'
    Properties:
      ConfigRuleName: securityhub-enabled
      Description: Checks that AWS Security Hub is enabled for an AWS Account. The
        rule is NON_COMPLIANT if AWS Security Hub is not enabled.
      Source:
        Owner: AWS
        SourceIdentifier: SECURITYHUB_ENABLED
    Type: AWS::Config::ConfigRule
  SnsEncryptedKms:
    Controls:
    - '2.5A'
    Properties:
      ConfigRuleName: sns-encrypted-kms
      Description: Checks whether Amazon SNS topic is encrypted with AWS Key Management
        Service (AWS KMS). The rule is NON_COMPLIANT if the Amazon SNS topic is not
        encrypted with AWS KMS.
      Scope:
        ComplianceResourceTypes:
        - AWS::SNS::Topic
      Source:
        Owner: AWS
        SourceIdentifier: SNS_ENCRYPTED_KMS
    Type: AWS::Config::ConfigRule
  SnsTopicMessageDeliveryNotificationEnabled:
    Controls:
    - '1.2'
    Properties:
      ConfigRuleName: sns-topic-message-delivery-notification-enabled
      Description: Checks if Amazon Simple Notification Service (SNS) logging is enabled
        for the delivery status of notification messages sent to a topic for the endpoints.
        The rule is NON_COMPLIANT if the delivery status notification for messages
        is not enabled.
      Scope:
        ComplianceResourceTypes:
        - AWS::SNS::Topic
      Source:
        Owner: AWS
        SourceIdentifier: SNS_TOPIC_MESSAGE_DELIVERY_NOTIFICATION_ENABLED
    Type: AWS::Config::ConfigRule
  SsmDocumentNotPublic:
    Controls:
    - '1.4'
    Properties:
      ConfigRuleName: ssm-document-not-public
      Description: Checks if AWS Systems Manager documents owned by the account are
        public. This rule is NON_COMPLIANT if SSM documents with owner 'Self' are
        public.
      Source:
        Owner: AWS
        SourceIdentifier: SSM_DOCUMENT_NOT_PUBLIC
    Type: AWS::Config::ConfigRule
  SubnetAutoAssignPublicIpDisabled:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: subnet-auto-assign-public-ip-disabled
      Description: Checks if Amazon Virtual Private Cloud (Amazon VPC) subnets are
        assigned a public IP address. This rule is NON_COMPLIANT if Amazon VPC has
        subnets that are assigned a public IP address.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Subnet
      Source:
        Owner: AWS
        SourceIdentifier: SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED
    Type: AWS::Config::ConfigRule
  VpcDefaultSecurityGroupClosed:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: vpc-default-security-group-closed
      Description: Checks that the default security group of any Amazon Virtual Private
        Cloud (VPC) does not allow inbound or outbound traffic. The rule is non-compliant
        if the default security group has one or more inbound or outbound traffic.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: VPC_DEFAULT_SECURITY_GROUP_CLOSED
    Type: AWS::Config::ConfigRule
  VpcFlowLogsEnabled:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    - '6.4'
    Properties:
      ConfigRuleName: vpc-flow-logs-enabled
      Description: Checks whether Amazon Virtual Private Cloud flow logs are found
        and enabled for Amazon VPC.
      Source:
        Owner: AWS
        SourceIdentifier: VPC_FLOW_LOGS_ENABLED
    Type: AWS::Config::ConfigRule
  VpcNetworkAclUnusedCheck:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: vpc-network-acl-unused-check
      Description: Checks if there are unused Network Access Control Lists (NACLs).
        The rule is NON_COMPLIANT if an NACL is not associated with a subnet.
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::NetworkAcl
      Source:
        Owner: AWS
        SourceIdentifier: VPC_NETWORK_ACL_UNUSED_CHECK
    Type: AWS::Config::ConfigRule
  VpcSgOpenOnlyToAuthorizedPorts:
    Controls:
    - '1.1'
    - '1.3'
    - '1.5A'
    Properties:
      ConfigRuleName: vpc-sg-open-only-to-authorized-ports
      Description: Checks whether any security groups with inbound 0.0.0.0/0 have
        TCP or UDP ports accessible. The rule is NON_COMPLIANT when a security group
        with inbound 0.0.0.0/0 has a port accessible which is not specified in the
        rule parameters.
      InputParameters:
        authorizedTcpPorts:
          Fn::If:
          - vpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts
          - Ref: VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts
          - Ref: AWS::NoValue
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS
    Type: AWS::Config::ConfigRule
Conditions:
  accessKeysRotatedParamMaxAccessKeyAge:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: AccessKeysRotatedParamMaxAccessKeyAge
  iamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamCustomerPolicyBlockedKmsActionsParamBlockedActionsPatterns
  iamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamInlinePolicyBlockedKmsActionsParamBlockedActionsPatterns
  iamPasswordPolicyParamMaxPasswordAge:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamPasswordPolicyParamMaxPasswordAge
  iamPasswordPolicyParamMinimumPasswordLength:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamPasswordPolicyParamMinimumPasswordLength
  iamPasswordPolicyParamPasswordReusePrevention:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamPasswordPolicyParamPasswordReusePrevention
  iamPasswordPolicyParamRequireLowercaseCharacters:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamPasswordPolicyParamRequireLowercaseCharacters
  iamPasswordPolicyParamRequireNumbers:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamPasswordPolicyParamRequireNumbers
  iamPasswordPolicyParamRequireSymbols:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamPasswordPolicyParamRequireSymbols
  iamPasswordPolicyParamRequireUppercaseCharacters:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamPasswordPolicyParamRequireUppercaseCharacters
  iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge
  restrictedIncomingTrafficParamBlockedPort1:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: RestrictedIncomingTrafficParamBlockedPort1
  restrictedIncomingTrafficParamBlockedPort2:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: RestrictedIncomingTrafficParamBlockedPort2
  restrictedIncomingTrafficParamBlockedPort3:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: RestrictedIncomingTrafficParamBlockedPort3
  restrictedIncomingTrafficParamBlockedPort4:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: RestrictedIncomingTrafficParamBlockedPort4
  restrictedIncomingTrafficParamBlockedPort5:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: RestrictedIncomingTrafficParamBlockedPort5
  vpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: VpcSgOpenOnlyToAuthorizedPortsParamAuthorizedTcpPorts
